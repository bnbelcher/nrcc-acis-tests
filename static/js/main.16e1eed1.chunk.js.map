{"version":3,"sources":["TestTool1/GetStationsInBox.js","TestTool1/LoadStationData.js","TestTool1/VariableSelect.js","TestTool1/PeriodSelect.js","TestTool1/StationMap.js","TestTool1/DataTable.js","TestTool1/index.js","App.js","serviceWorker.js","index.js"],"names":["protocol","window","location","GetStationsInBox","_ref","variable","period","bounds","params","meta","elems","output","sdate","edate","bbox","axios","post","concat","then","res","data","catch","err","console","log","response","statusText","propTypes","PropTypes","string","isRequired","array","LoadStationData","uid","name","VariableSelect","onchange","react_default","a","createElement","style","fontWeight","float","onChange","value","PeriodSelect","StationMap","center","stations","selected","onclick","Map","zoomControl","zoom","attributionControl","height","width","TileLayer","attribution","url","map","s","i","CircleMarker","key","ll","radius","color","onClick","ZoomControl","position","DataTable","title","border","align","d","TestTool1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStationChange","setState","station","state","handleVariableChange","e","target","handlePeriodChange","days","parseInt","time","moment","subtract","format","numdays","toString","_this2","prevProps","prevState","_this3","classes","className","fontSize","TestTool1_VariableSelect","TestTool1_PeriodSelect","progressWrapper","TestTool1_StationMap","CircularProgress","size","mapProgress","TestTool1_DataTable","padding","Component","withStyles","theme","green","zIndex","top","left","marginTop","marginLeft","App","src_TestTool1","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16e1eed1.chunk.js","sourcesContent":["///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n//import React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst protocol = window.location.protocol;\n\nconst GetStationsInBox = ({variable,period,bounds}) => {\n        let params = {\n            \"meta\":\"name,ll,uid\",\n            \"elems\":variable,\n            \"output\":\"json\",\n            \"sdate\":period[0],\n            \"edate\":period[1],\n            \"bbox\":bounds\n        }\n        return axios\n          .post(`${protocol}//data.rcc-acis.org/StnMeta`, params)\n          .then(res => {\n            return res.data.meta\n          })\n          .catch(err => {\n            console.log(\n              \"Request Error: \" + (err.response.data || err.response.statusText)\n            );\n          });\n}\n\nGetStationsInBox.propTypes = {\n  variable: PropTypes.string.isRequired,\n  period: PropTypes.array.isRequired,\n  bounds: PropTypes.string.isRequired,\n};\n\nexport default GetStationsInBox;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\n//import React from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst protocol = window.location.protocol;\n\nconst LoadStationData = ({uid,variable,period}) => {\n        let params = {\n            \"uid\": uid,\n            \"meta\":\"name,state\",\n            \"sdate\":period[0],\n            \"edate\":period[1],\n            \"elems\":[\n                {\"name\":variable},\n              ]\n          }\n        return axios\n          .post(`${protocol}//data.rcc-acis.org/StnData`, params)\n          .then(res => {\n            return res.data.data\n          })\n          .catch(err => {\n            console.log(\n              \"Request Error: \" + (err.response.data || err.response.statusText)\n            );\n          });\n}\n\nLoadStationData.propTypes = {\n  uid: PropTypes.string.isRequired,\n  variable: PropTypes.string.isRequired,\n  period: PropTypes.array.isRequired,\n};\n\nexport default LoadStationData;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst VariableSelect = ({onchange}) => {\n        return (\n            <form>\n              <label style={{\"fontWeight\":\"bold\",\"float\":\"left\"}}>\n                Variable:\n                <select onChange={onchange}>\n                  <option value=\"avgt\">Ave Temperature</option>\n                  <option value=\"pcpn\">Precipitation</option>\n                </select>\n              </label>\n            </form>\n        );\n}\n\nVariableSelect.propTypes = {\n  onchange: PropTypes.func.isRequired\n};\n\nexport default VariableSelect;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PeriodSelect = ({onchange}) => {\n        return (\n            <form>\n              <label style={{\"fontWeight\":\"bold\",\"float\":\"left\"}}>\n                Time period:\n                <select onChange={onchange}>\n                  <option value=\"7\">last 7 days</option>\n                  <option value=\"30\">last 30 days</option>\n                  <option value=\"90\">last 90 days</option>\n                </select>\n              </label>\n            </form>\n        );\n}\n\nPeriodSelect.propTypes = {\n  onchange: PropTypes.func.isRequired\n};\n\nexport default PeriodSelect;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'leaflet/dist/leaflet.css';\nimport { Map, CircleMarker, TileLayer, ZoomControl } from 'react-leaflet';\n\nconst zoomLevel = 7;\nconst heightMap = '300px';\nconst widthMap = '300px';\n\nconst StationMap = ({center,stations,selected,onclick}) => {\n\n    return (\n        <Map\n            center={center}\n            zoomControl={false}\n            zoom={zoomLevel}\n            attributionControl={false}\n            style={{\n                height: heightMap,\n                width: widthMap,\n            }}\n        >\n            <TileLayer\n                attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {stations &&\n              stations.map((s,i) => (\n                <CircleMarker\n                  key={i+\"marker\"}\n                  center={[s.ll[1],s.ll[0]]}\n                  radius={3}\n                  color={(selected===s.name) ? \"red\" : \"black\"}\n                  onClick={() => {onclick(s)}}\n                >\n                </CircleMarker>\n              ))\n            }\n            <ZoomControl position=\"topleft\" />\n        </Map>\n    );\n}\n\nStationMap.propTypes = {\n  center: PropTypes.array.isRequired,\n  stations: PropTypes.array.isRequired,\n  selected: PropTypes.string.isRequired,\n  onclick: PropTypes.func.isRequired,\n};\n\nexport default StationMap;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DataTable = ({title,data}) => {\n        return (\n                <div>\n                    <br/> \n                      <span style={{\"fontWeight\":\"bold\",\"float\":\"left\"}}>\n                       {title}\n                      </span>\n                    <br/>\n                    <table border=\"1\"><tbody>\n                      <tr><th align=\"left\">Date</th><th align=\"left\">Value</th></tr>\n                        {data.map((d,i) => (\n                          <tr key={d[0]}>\n                            <td align=\"left\">{d[0]}</td><td align=\"left\">{d[1]}</td>\n                          </tr>\n                        ))}\n                    </tbody></table>\n                </div>\n        );\n}\n\nDataTable.propTypes = {\n  data: PropTypes.array.isRequired\n};\n\nexport default DataTable;\n","///////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////\n\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport moment from 'moment';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport green from '@material-ui/core/colors/green';\n\nimport GetStationsInBox from './GetStationsInBox';\nimport LoadStationData from './LoadStationData';\nimport VariableSelect from './VariableSelect';\nimport PeriodSelect from './PeriodSelect';\nimport StationMap from './StationMap';\nimport DataTable from './DataTable';\n\nconst styles = theme => ({\n  progressWrapper: {\n    position: 'relative',\n  },\n  mapProgress: {\n    color: green[500],\n    position: 'absolute',\n    zIndex: 1000,\n    top: '50%',\n    left: '150px',\n    marginTop: -30,\n    marginLeft: -30,\n  },\n});\n\nclass TestTool1 extends Component {\n\n    constructor(props) {\n        super(props);\n        let numdays = 7\n        let sdate = moment().subtract(numdays-1, 'days')\n        let edate = moment()\n        this.state = {\n            stations: null,\n            station: null,\n            period: [sdate.format('YYYY-MM-DD'),edate.format('YYYY-MM-DD')],\n            time: numdays.toString(),\n            variable: \"avgt\",\n            bounds: \"-78,41,-75,44\",\n            center: [42.5,-76.5],\n            data: null,\n        };\n    }\n\n    componentDidMount() {\n      GetStationsInBox({variable:this.state.variable, period:this.state.period, bounds:this.state.bounds})\n        .then(response =>\n          this.setState({ stations: response })\n        );\n    }\n\n    componentDidUpdate(prevProps,prevState) {\n      if (prevState.variable!==this.state.variable ||\n          prevState.period!==this.state.period ||\n          prevState.bounds!==this.state.bounds) {\n            GetStationsInBox({variable:this.state.variable, period:this.state.period, bounds:this.state.bounds})\n              .then(response =>\n                this.setState({ stations: response })\n              );\n      }\n    }\n\n    handleStationChange = (s) => {\n        this.setState({\n          data: null,\n          station: s.name\n        })\n        LoadStationData({uid:s.uid, variable:this.state.variable, period:this.state.period})\n          .then(response =>\n            this.setState({ data: response })\n          );\n    }\n\n    handleVariableChange = (e) => {\n        this.setState({\n          stations: null,\n          station: null,\n          data: null,\n          variable: e.target.value\n        })\n    }\n\n    handlePeriodChange = (e) => {\n        let days = parseInt(e.target.value,10)\n        this.setState({\n          stations: null,\n          station: null,\n          data: null,\n          time: days,\n          period: [moment().subtract(days,'days').format('YYYY-MM-DD'),moment().format('YYYY-MM-DD')]\n        })\n    }\n\n    render() {\n\n        const { classes } = this.props;\n\n        return (\n            <div className=\"tool\">\n\n                <div className=\"tool-header\">\n                    <span style={{\"fontSize\":\"24px\",\"fontWeight\":\"bold\",\"float\":\"left\"}}>Recent weather station data</span>\n                    <br/><br/>\n                </div>\n\n                <div className=\"user-input\">\n                    <VariableSelect onchange={this.handleVariableChange} />\n                    <br/><br/>\n                    <PeriodSelect onchange={this.handlePeriodChange} />\n                    <br/><br/>\n                </div>\n\n                <div className={classes.progressWrapper}>\n                  <StationMap\n                    center={this.state.center}\n                    stations={this.state.stations}\n                    selected={this.state.station}\n                    onclick={this.handleStationChange}\n                  />\n                  {!this.state.stations &&\n                      <CircularProgress size={64} className={classes.mapProgress} />\n                  }\n                </div>\n\n                <div className={classes.progressWrapper}>\n                  {this.state.stations && this.state.station && this.state.data &&\n                    <DataTable\n                      title={this.state.station}\n                      data={this.state.data}\n                    />\n                  }\n                  {this.state.stations && this.state.station && !this.state.data &&\n                      <span style={{\"color\":\"red\",\"float\":\"left\",\"padding\":\"20px\"}}>Loading Table ...</span>\n                  }\n                  {this.state.stations && !this.state.station && !this.state.data &&\n                      <span style={{\"color\":\"black\",\"float\":\"left\",\"padding\":\"20px\"}}>Click a station from map</span>\n                  }\n                </div>\n\n            </div>\n        );\n\n    }\n}\n\nexport default withStyles(styles)(TestTool1);\n","import React from 'react';\n\nimport TestTool1 from './TestTool1';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TestTool1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}